{"version":3,"sources":["App.js","Header/Header.js","Tracks/Tracks.js","serviceWorker.js","index.js"],"names":["firstPlay","Header","react_default","a","createElement","Fragment","className","id","alt","src","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","target","rel","href","React","Component","track","props","altTag","coverArt","title","onClick","click","currentTrack","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playAndPauseTrack","whichTrack","audioPlayer","document","getElementById","undefined","state","tracks","isPlaying","soundfile","load","play","innerHTML","pause","newState2","JSON","parse","stringify","setState","track1","name","track2","track3","_this2","keys","map","Tracks","key","src_Header_Header","controls","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f65023c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header/Header.js';\nimport Track from './Tracks/Tracks.js';\n\nlet firstPlay\nlet currentTrack = 1\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tracks: {\n        track1: {\n          name: \"I Got You\",\n          coverArt: \"I Got You Cover Art.png\",\n          soundfile: \"/soundfiles/Wex & Cred - I Got You (ft. MKHL).mp3\",\n          isPlaying: false\n        },\n        track2: {\n          name: \"Aura\",\n          coverArt: \"AuraCoverArt.png\",\n          soundfile: \"/soundfiles/Wex - Aura (ft. Waywoc) 4.wav\",\n          isPlaying: false\n        },\n        track3: {\n          name: \"Strictly for the Music\",\n          coverArt: \"evenNewStrict.png\",\n          soundfile: \"/soundfiles/Strictly for the Music.wav\",\n          isPlaying: false\n        },\n      }\n    }\n  }\n\n\n  playAndPauseTrack = (whichTrack) => {\n    let id = whichTrack\n    let audioPlayer = document.getElementById(\"audio\")\n    if (firstPlay === undefined) {\n      currentTrack = id;\n      firstPlay = true\n    }\n    if (this.state.tracks[whichTrack].isPlaying === false) {\n\n      let audioSource = document.getElementById(\"audioSource\")\n      audioSource.src = this.state.tracks[whichTrack].soundfile\n      if (currentTrack !== id || (firstPlay === true)) {\n        audioPlayer.load()\n      }\n      audioPlayer.play()\n      document.getElementById(whichTrack).innerHTML = '<i class=\"fas fa-pause fa-2x fontAwesomePlayTrackIcon\"></i>'\n      if (currentTrack !== id) {\n        document.getElementById(currentTrack).innerHTML = '<i class=\"fas fa-play fa-2x fontAwesomePlayTrackIcon\"></i>'\n        // let newState = JSON.parse(JSON.stringify(this.state));\n        // newState.tracks[currentTrack].isPlaying = false\n        // this.setState({\n        //   tracks: newState.tracks\n        // });\n        \n        this.state.tracks[currentTrack].isPlaying = false\n      }\n    } else {\n      audioPlayer.pause()\n      document.getElementById(whichTrack).innerHTML = '<i class=\"fas fa-play fa-2x fontAwesomePlayTrackIcon\"></i>'\n\n    }\n\n    firstPlay = false\n    currentTrack = id;\n\n    let newState2 = JSON.parse(JSON.stringify(this.state));\n    newState2.tracks[whichTrack].isPlaying  = !this.state.tracks[whichTrack].isPlaying\n    this.setState({\n      tracks: newState2.tracks\n    });\n\n    // this.state.tracks[whichTrack].isPlaying = !this.state.tracks[whichTrack].isPlaying\n\n  }\n\n  render() {\n\n    let tracks = (\n      <div>\n        {Object.keys(this.state.tracks).map((track) => {\n          return <Track alt={track} key={track} id={track} coverArt={this.state.tracks[track].coverArt} title={this.state.tracks[track].name}\n            click={() => this.playAndPauseTrack(document.getElementById(track).id)}\n          />\n        })}\n      </div>\n    );\n\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <div id=\"picFrame\">\n          <img id=\"soundcloudAvatar\" src=\"soundcloudAvatar.jpg\" alt=\"Profile Pic\" />\n        </div>\n        <div id=\"alltracksBossContainer\">\n          {tracks}\n        </div>\n        <div id=\"audioContainer\">\n          <audio id=\"audio\" controls>\n            <source id=\"audioSource\" />\n          </audio>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\n// import './Person.css';\n\nclass Header extends React.Component {\n    render() {\n      return (\n        <React.Fragment>\n          <nav className=\"navbar navbar-expand-md navbar-light navbarText\">\n        <div id=\"logoText\" className=\"navbar-brand\">\n            <img alt=\"Logo\" id=\"kicklrLogo\" src=\"logo.png\"/> Mixed By Wex\n        </div>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav mr-auto\">\n                \n\n            </ul>\n            <ul className=\"navbar-nav\">\n                <li className=\"nav-item \">\n                    <a className=\"nav-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://soundcloud.com/mixedbywex\">SoundCloud</a>\n                </li>\n                <li className=\"nav-item\">\n                    <a className=\"nav-link disabled\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.instagram.com/mixedbywex/\">Instagram</a>\n                </li>\n            </ul>\n\n        </div>\n    </nav>\n        </React.Fragment>\n      );\n    }\n  }\n\nexport default Header;","import React from 'react';\n\nconst track = (props) => {\n\n    return (\n        <div className=\"tracksContainer\">\n            <div className=\"coverArtContainer\">\n                {/* The conditional below is just because on of the photos has a filter property on it*/}\n                <img alt={props.altTag} id=\"soundcloudAvatar\" className={props.coverArt === \"AuraCoverArt.png\" ? \"coverArt\" : \"iGotYouCoverArt\"}\n                    src={props.coverArt} />\n            </div>\n            <div className=\"trackTitleContainer\">\n                <div className=\"title\"> {props.title} </div>\n            </div>\n            <div onClick={props.click} id={props.id} className=\"playPauseContainer\">\n                <i className=\"fas fa-play fa-2x fontAwesomePlayTrackIcon\"></i>\n            </div>\n\n        </div>\n    )\n};\n\nexport default track;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}